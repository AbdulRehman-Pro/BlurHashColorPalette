name: Android APK Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > keystore.jks
          mv keystore.jks release-key.jks

      - name: Verify Keystore File
        run: ls -la release-key.jks

      - name: Grant Execute Permission for Gradle
        run: chmod +x gradlew

      - name: Extract Version Name
        run: echo "VERSION_NAME=$(./gradlew -q printVersionName)" >> $GITHUB_ENV

      - name: Build Signed APK
        run: |
          export KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
          export KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          export KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          ./gradlew clean assembleRelease

      - name: Debug Build Output
        run: ls -R app/build/outputs/

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/BlurHash-${{ env.VERSION_NAME }}-release.apk

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: app/build/outputs/apk/release/BlurHash-${{ env.VERSION_NAME }}-release.apk
      #     tag_name: v${{ env.VERSION_NAME }}
      #     release_name: Release v${{ env.VERSION_NAME }}
      #     draft: false
      #     prerelease: false
      #     generate_release_notes: false
      #     make_latest: true
      #     repository: ${{ github.repository }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}

      # - name: Remove Source Code from Release
      #   run: |
      #     RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.VERSION_NAME }}" | jq -r .id)

      #     ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | jq -r '.[] | select(.name | endswith(".zip") or endswith(".tar.gz")) | .id')

      #     for ASSET_ID in $ASSETS; do
      #       curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #         "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
      #     done
      - name: Create GitHub Release Manually (No Source Code)
        run: |
          # Extract version name from your app's build.gradle
          VERSION_NAME=$(grep "versionName" android/app/build.gradle | awk '{print $2}' | tr -d '"')

          echo "Version Name: $VERSION_NAME"

          RESPONSE=$(curl -s -X POST -H "Authorization: Bearer ${{ secrets.RELEASE_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{
              \"tag_name\": \"v$VERSION_NAME\",
              \"name\": \"Release v$VERSION_NAME\",
              \"body\": \"New release with APK\",
              \"draft\": false,
              \"prerelease\": false
            }")

          RELEASE_ID=$(echo "$RESPONSE" | jq -r .id)

          if [[ "$RELEASE_ID" == "null" ]]; then
            echo "❌ Failed to create release: $RESPONSE"
            exit 1
          fi

          echo "✅ Release created with ID: $RELEASE_ID"

          ASSET_URL=$(echo "$RESPONSE" | jq -r .upload_url | sed "s/{?name,label}//")

          APK_PATH="android/app/build/outputs/apk/release/BlurHash-$VERSION_NAME-release.apk"

          if [ ! -f "$APK_PATH" ]; then
            echo "❌ APK file not found at $APK_PATH"
            exit 1
          fi

          echo "✅ APK found. Uploading to GitHub Release..."

          curl -X POST -H "Authorization: Bearer ${{ secrets.RELEASE_PAT }}" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary @"$APK_PATH" \
            "$ASSET_URL?name=BlurHash-$VERSION_NAME-release.apk"

        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
